/* lib/typescript/global.d - TypeScript interfaces used in many unrelated areas of the application. */

// describes users and devices
interface agent {
    deviceData: deviceData;
    ipAll: networkAddresses;
    ipSelected: string;
    name: string;
    ports: ports;
    shares: agentShares;
    status: heartbeatStatus;
}

// a container of agent types mapping to lists of their respective agents
interface agentList {
    device: string[];
    user: string[];
}

// data model generated by common.agents
interface agentNames {
    agent?: string;
    agentType: agentType;
    share?: string;
}

// a data object used in determination of an agent's IP address
interface agentOnline {
    agent: string;
    agentType: agentType;
    ipAll: networkAddresses;
    ipSelected: string;
    mode: testListType;
}

// allows association of a string to an agent identity for any purpose
interface agentSummary {
    device: {
        [key:string]: string;
    };
    user: {
        [key:string]: string;
    };
}

// an object of agent data by agent id, such as "device" or "user" objects
interface agents {
    [key:string]: agent;
}

// the a share object instance of an agent's shares
interface agentShare {
    execute: boolean;
    name: string;
    readOnly: boolean;
    type: shareType;
}

// the share object of an agent that stores shares by id
interface agentShares {
    [key:string]: agentShare;
}

interface deviceData {
    cpuCores: number;
    cpuID: string;
    platform: string;
    memTotal: number;
    osType: string;
    osVersion: string;
}

// an error reporting model that stores a stack trace and error text
interface error {
    error: string;
    stack: string[];
}

// a generic type to store programmatic flag data typically used with various simultaneous asynchronous tasks
interface flagList {
    [key:string]: boolean;
}

// describes the agency of a given device
interface hashAgent {
    device: string;
    deviceData: deviceData;
    user: string;
}

// describes data necessary to create a hash name for a new share
interface hashShare {
    device: string;
    share: string;
    type: shareType;
}

// the response to the request for a share hash name
interface hashShareResponse {
    device: string;
    hash: string;
    share: string;
    type: shareType;
}

// a means of communicating an agent's online availability through the heartbeat mechanism
interface heartbeatUpdate {
    agentFrom: "localhost-browser" | "localhost-terminal";
    broadcastList: heartbeatShare;
    shares: agents;
    status: heartbeatStatus;
    type: agentType;
}

// a means of describing network port data in a single location
interface ports {
    http: number;
    ws: number;
}

// 
interface socketData {
    data: socketDataType;
    service: requestType;
}

// describes file contents interpreted as a string literal
interface stringData {
    content: string;
    id: string;
    path: string;
}